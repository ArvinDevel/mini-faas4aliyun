// Code generated by protoc-gen-go. DO NOT EDIT.
// source: resource_manager.proto

package resourcemanagerproto

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type ReserveNodeRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ReserveNodeRequest) Reset()         { *m = ReserveNodeRequest{} }
func (m *ReserveNodeRequest) String() string { return proto.CompactTextString(m) }
func (*ReserveNodeRequest) ProtoMessage()    {}
func (*ReserveNodeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_7048dd9233ee965d, []int{0}
}

func (m *ReserveNodeRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ReserveNodeRequest.Unmarshal(m, b)
}
func (m *ReserveNodeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ReserveNodeRequest.Marshal(b, m, deterministic)
}
func (m *ReserveNodeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReserveNodeRequest.Merge(m, src)
}
func (m *ReserveNodeRequest) XXX_Size() int {
	return xxx_messageInfo_ReserveNodeRequest.Size(m)
}
func (m *ReserveNodeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ReserveNodeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ReserveNodeRequest proto.InternalMessageInfo

type ReserveNodeReply struct {
	Node                 *NodeDesc `protobuf:"bytes,1,opt,name=node,proto3" json:"node,omitempty"`
	IsThrottled          bool      `protobuf:"varint,2,opt,name=is_throttled,json=isThrottled,proto3" json:"is_throttled,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *ReserveNodeReply) Reset()         { *m = ReserveNodeReply{} }
func (m *ReserveNodeReply) String() string { return proto.CompactTextString(m) }
func (*ReserveNodeReply) ProtoMessage()    {}
func (*ReserveNodeReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_7048dd9233ee965d, []int{1}
}

func (m *ReserveNodeReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ReserveNodeReply.Unmarshal(m, b)
}
func (m *ReserveNodeReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ReserveNodeReply.Marshal(b, m, deterministic)
}
func (m *ReserveNodeReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReserveNodeReply.Merge(m, src)
}
func (m *ReserveNodeReply) XXX_Size() int {
	return xxx_messageInfo_ReserveNodeReply.Size(m)
}
func (m *ReserveNodeReply) XXX_DiscardUnknown() {
	xxx_messageInfo_ReserveNodeReply.DiscardUnknown(m)
}

var xxx_messageInfo_ReserveNodeReply proto.InternalMessageInfo

func (m *ReserveNodeReply) GetNode() *NodeDesc {
	if m != nil {
		return m.Node
	}
	return nil
}

func (m *ReserveNodeReply) GetIsThrottled() bool {
	if m != nil {
		return m.IsThrottled
	}
	return false
}

type NodeDesc struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Address              string   `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
	MemoryInMb           int64    `protobuf:"varint,3,opt,name=memory_in_mb,json=memoryInMb,proto3" json:"memory_in_mb,omitempty"`
	ReservedTime         string   `protobuf:"bytes,4,opt,name=reserved_time,json=reservedTime,proto3" json:"reserved_time,omitempty"`
	Port                 int32    `protobuf:"varint,5,opt,name=port,proto3" json:"port,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NodeDesc) Reset()         { *m = NodeDesc{} }
func (m *NodeDesc) String() string { return proto.CompactTextString(m) }
func (*NodeDesc) ProtoMessage()    {}
func (*NodeDesc) Descriptor() ([]byte, []int) {
	return fileDescriptor_7048dd9233ee965d, []int{2}
}

func (m *NodeDesc) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NodeDesc.Unmarshal(m, b)
}
func (m *NodeDesc) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NodeDesc.Marshal(b, m, deterministic)
}
func (m *NodeDesc) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NodeDesc.Merge(m, src)
}
func (m *NodeDesc) XXX_Size() int {
	return xxx_messageInfo_NodeDesc.Size(m)
}
func (m *NodeDesc) XXX_DiscardUnknown() {
	xxx_messageInfo_NodeDesc.DiscardUnknown(m)
}

var xxx_messageInfo_NodeDesc proto.InternalMessageInfo

func (m *NodeDesc) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *NodeDesc) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *NodeDesc) GetMemoryInMb() int64 {
	if m != nil {
		return m.MemoryInMb
	}
	return 0
}

func (m *NodeDesc) GetReservedTime() string {
	if m != nil {
		return m.ReservedTime
	}
	return ""
}

func (m *NodeDesc) GetPort() int32 {
	if m != nil {
		return m.Port
	}
	return 0
}

type ReleaseNodeRequest struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ReleaseNodeRequest) Reset()         { *m = ReleaseNodeRequest{} }
func (m *ReleaseNodeRequest) String() string { return proto.CompactTextString(m) }
func (*ReleaseNodeRequest) ProtoMessage()    {}
func (*ReleaseNodeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_7048dd9233ee965d, []int{3}
}

func (m *ReleaseNodeRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ReleaseNodeRequest.Unmarshal(m, b)
}
func (m *ReleaseNodeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ReleaseNodeRequest.Marshal(b, m, deterministic)
}
func (m *ReleaseNodeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReleaseNodeRequest.Merge(m, src)
}
func (m *ReleaseNodeRequest) XXX_Size() int {
	return xxx_messageInfo_ReleaseNodeRequest.Size(m)
}
func (m *ReleaseNodeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ReleaseNodeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ReleaseNodeRequest proto.InternalMessageInfo

func (m *ReleaseNodeRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type ReleaseNodeReply struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ReleaseNodeReply) Reset()         { *m = ReleaseNodeReply{} }
func (m *ReleaseNodeReply) String() string { return proto.CompactTextString(m) }
func (*ReleaseNodeReply) ProtoMessage()    {}
func (*ReleaseNodeReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_7048dd9233ee965d, []int{4}
}

func (m *ReleaseNodeReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ReleaseNodeReply.Unmarshal(m, b)
}
func (m *ReleaseNodeReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ReleaseNodeReply.Marshal(b, m, deterministic)
}
func (m *ReleaseNodeReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReleaseNodeReply.Merge(m, src)
}
func (m *ReleaseNodeReply) XXX_Size() int {
	return xxx_messageInfo_ReleaseNodeReply.Size(m)
}
func (m *ReleaseNodeReply) XXX_DiscardUnknown() {
	xxx_messageInfo_ReleaseNodeReply.DiscardUnknown(m)
}

var xxx_messageInfo_ReleaseNodeReply proto.InternalMessageInfo

func init() {
	proto.RegisterType((*ReserveNodeRequest)(nil), "resourcemanagerproto.ReserveNodeRequest")
	proto.RegisterType((*ReserveNodeReply)(nil), "resourcemanagerproto.ReserveNodeReply")
	proto.RegisterType((*NodeDesc)(nil), "resourcemanagerproto.NodeDesc")
	proto.RegisterType((*ReleaseNodeRequest)(nil), "resourcemanagerproto.ReleaseNodeRequest")
	proto.RegisterType((*ReleaseNodeReply)(nil), "resourcemanagerproto.ReleaseNodeReply")
}

func init() {
	proto.RegisterFile("resource_manager.proto", fileDescriptor_7048dd9233ee965d)
}

var fileDescriptor_7048dd9233ee965d = []byte{
	// 314 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x91, 0xcb, 0x4e, 0xf3, 0x30,
	0x10, 0x85, 0xeb, 0x5e, 0xfe, 0xbf, 0x9d, 0x96, 0x8b, 0x46, 0x15, 0x8a, 0x58, 0xa0, 0x60, 0x10,
	0xca, 0xaa, 0x8b, 0xf2, 0x0a, 0x6c, 0x58, 0x94, 0x85, 0xd5, 0x7d, 0x94, 0xd6, 0x23, 0xb0, 0x14,
	0xc7, 0xc1, 0x76, 0x91, 0xf2, 0x14, 0x3c, 0x1e, 0xaf, 0x83, 0xea, 0x34, 0x28, 0x2d, 0xad, 0xc4,
	0xce, 0x3e, 0x3e, 0x33, 0x67, 0xe6, 0x33, 0x5c, 0x59, 0x72, 0x66, 0x63, 0xd7, 0x94, 0xea, 0xac,
	0xc8, 0x5e, 0xc9, 0xce, 0x4a, 0x6b, 0xbc, 0xc1, 0x69, 0xa3, 0xef, 0xe4, 0xa0, 0xf2, 0x29, 0xa0,
	0x20, 0x47, 0xf6, 0x83, 0x5e, 0x8c, 0x24, 0x41, 0xef, 0x1b, 0x72, 0x9e, 0x2b, 0xb8, 0xdc, 0x53,
	0xcb, 0xbc, 0xc2, 0x39, 0xf4, 0x0b, 0x23, 0x29, 0x62, 0x31, 0x4b, 0xc6, 0xf3, 0x9b, 0xd9, 0xb1,
	0x76, 0xb3, 0xad, 0xfd, 0x89, 0xdc, 0x5a, 0x04, 0x2f, 0xde, 0xc2, 0x44, 0xb9, 0xd4, 0xbf, 0x59,
	0xe3, 0x7d, 0x4e, 0x32, 0xea, 0xc6, 0x2c, 0x19, 0x8a, 0xb1, 0x72, 0xcb, 0x46, 0xe2, 0x9f, 0x0c,
	0x86, 0x4d, 0x15, 0x9e, 0x43, 0x57, 0xc9, 0x90, 0x30, 0x12, 0x5d, 0x25, 0x31, 0x82, 0xff, 0x99,
	0x94, 0x96, 0x9c, 0x0b, 0xa5, 0x23, 0xd1, 0x5c, 0x31, 0x86, 0x89, 0x26, 0x6d, 0x6c, 0x95, 0xaa,
	0x22, 0xd5, 0xab, 0xa8, 0x17, 0xb3, 0xa4, 0x27, 0xa0, 0xd6, 0x9e, 0x8b, 0xc5, 0x0a, 0xef, 0xe0,
	0xcc, 0xd6, 0x3b, 0xc8, 0xd4, 0x2b, 0x4d, 0x51, 0x3f, 0x74, 0x98, 0x34, 0xe2, 0x52, 0x69, 0x42,
	0x84, 0x7e, 0x69, 0xac, 0x8f, 0x06, 0x31, 0x4b, 0x06, 0x22, 0x9c, 0xf9, 0xfd, 0x16, 0x49, 0x4e,
	0x99, 0x6b, 0x23, 0x39, 0x1c, 0x8d, 0xe3, 0x16, 0x51, 0xcb, 0x55, 0xe6, 0xd5, 0xfc, 0x8b, 0xc1,
	0x85, 0xd8, 0x61, 0x59, 0xd4, 0x58, 0x30, 0x83, 0x71, 0x0b, 0x25, 0x26, 0xc7, 0xb9, 0xfd, 0xfe,
	0x83, 0xeb, 0x87, 0x3f, 0x38, 0xcb, 0xbc, 0xe2, 0x9d, 0x3a, 0xe2, 0x67, 0x94, 0xd3, 0x11, 0x87,
	0x3b, 0x9d, 0x8e, 0xd8, 0xdf, 0x8b, 0x77, 0x56, 0xff, 0xc2, 0xcb, 0xe3, 0x77, 0x00, 0x00, 0x00,
	0xff, 0xff, 0x09, 0xb8, 0x8a, 0x77, 0x5d, 0x02, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// ResourceManagerClient is the client API for ResourceManager service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ResourceManagerClient interface {
	ReserveNode(ctx context.Context, in *ReserveNodeRequest, opts ...grpc.CallOption) (*ReserveNodeReply, error)
	ReleaseNode(ctx context.Context, in *ReleaseNodeRequest, opts ...grpc.CallOption) (*ReleaseNodeReply, error)
}

type resourceManagerClient struct {
	cc grpc.ClientConnInterface
}

func NewResourceManagerClient(cc grpc.ClientConnInterface) ResourceManagerClient {
	return &resourceManagerClient{cc}
}

func (c *resourceManagerClient) ReserveNode(ctx context.Context, in *ReserveNodeRequest, opts ...grpc.CallOption) (*ReserveNodeReply, error) {
	out := new(ReserveNodeReply)
	err := c.cc.Invoke(ctx, "/resourcemanagerproto.ResourceManager/ReserveNode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceManagerClient) ReleaseNode(ctx context.Context, in *ReleaseNodeRequest, opts ...grpc.CallOption) (*ReleaseNodeReply, error) {
	out := new(ReleaseNodeReply)
	err := c.cc.Invoke(ctx, "/resourcemanagerproto.ResourceManager/ReleaseNode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ResourceManagerServer is the server API for ResourceManager service.
type ResourceManagerServer interface {
	ReserveNode(context.Context, *ReserveNodeRequest) (*ReserveNodeReply, error)
	ReleaseNode(context.Context, *ReleaseNodeRequest) (*ReleaseNodeReply, error)
}

// UnimplementedResourceManagerServer can be embedded to have forward compatible implementations.
type UnimplementedResourceManagerServer struct {
}

func (*UnimplementedResourceManagerServer) ReserveNode(ctx context.Context, req *ReserveNodeRequest) (*ReserveNodeReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReserveNode not implemented")
}
func (*UnimplementedResourceManagerServer) ReleaseNode(ctx context.Context, req *ReleaseNodeRequest) (*ReleaseNodeReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReleaseNode not implemented")
}

func RegisterResourceManagerServer(s *grpc.Server, srv ResourceManagerServer) {
	s.RegisterService(&_ResourceManager_serviceDesc, srv)
}

func _ResourceManager_ReserveNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReserveNodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceManagerServer).ReserveNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/resourcemanagerproto.ResourceManager/ReserveNode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceManagerServer).ReserveNode(ctx, req.(*ReserveNodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResourceManager_ReleaseNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReleaseNodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceManagerServer).ReleaseNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/resourcemanagerproto.ResourceManager/ReleaseNode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceManagerServer).ReleaseNode(ctx, req.(*ReleaseNodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _ResourceManager_serviceDesc = grpc.ServiceDesc{
	ServiceName: "resourcemanagerproto.ResourceManager",
	HandlerType: (*ResourceManagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ReserveNode",
			Handler:    _ResourceManager_ReserveNode_Handler,
		},
		{
			MethodName: "ReleaseNode",
			Handler:    _ResourceManager_ReleaseNode_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "resource_manager.proto",
}
